package main

import "fmt"

const DefaultPermutationSize = 128

var IP Permutation = Permutation{Data: []byte{
	58, 50, 42, 34, 26, 18, 10, 2,
	60, 52, 44, 36, 28, 20, 12, 4,
	62, 54, 46, 38, 30, 22, 14, 6,
	64, 56, 48, 40, 32, 24, 16, 8,
	57, 49, 41, 33, 25, 17, 9, 1,
	59, 51, 43, 35, 27, 19, 11, 3,
	61, 53, 45, 37, 29, 21, 13, 5,
	63, 55, 47, 39, 31, 23, 15, 7,
	122, 114, 106, 98, 90, 82, 74, 66,
	124, 116, 108, 100, 92, 84, 76, 68,
	126, 118, 110, 102, 94, 86, 78, 70,
	128, 120, 112, 104, 96, 88, 80, 72,
	121, 113, 105, 97, 89, 81, 73, 65,
	123, 115, 107, 99, 91, 83, 75, 67,
	125, 117, 109, 101, 93, 85, 77, 69,
	127, 119, 111, 103, 95, 87, 79, 71,
}}

var PC1 Permutation = Permutation{Data: []byte{
	57, 49, 41, 33, 25, 17, 9,
	1, 58, 50, 42, 34, 26, 18,
	10, 2, 59, 51, 43, 35, 27,
	19, 11, 3, 60, 52, 44, 36,
	63, 55, 47, 39, 31, 23, 15,
	7, 62, 54, 46, 38, 30, 22,
	14, 6, 61, 53, 45, 37, 29,
	21, 13, 5, 28, 20, 12, 4,
	121, 113, 105, 97, 89, 81, 73,
	65, 122, 114, 106, 98, 90, 82,
	74, 66, 123, 115, 107, 99, 91,
	83, 75, 67, 124, 116, 108, 100,
	127, 119, 111, 103, 95, 87, 79,
	71, 126, 118, 110, 102, 94, 86,
	78, 70, 125, 117, 109, 101, 93,
	85, 77, 69, 92, 84, 76, 68,
}}

var PC2 Permutation = Permutation{Data: []byte{
	14, 17, 11, 24, 1, 5, 3, 28,
	15, 6, 21, 10, 23, 19, 12, 4,
	26, 8, 16, 7, 27, 20, 13, 2,
	41, 52, 31, 37, 47, 55, 30, 40,
	51, 45, 33, 48, 44, 49, 39, 56,
	34, 53, 46, 42, 50, 36, 29, 32,
	70, 73, 67, 80, 57, 61, 59, 84,
	71, 62, 77, 66, 75, 69, 60, 64,
	82, 64, 72, 63, 83, 76, 65, 58,
	97, 108, 89, 95, 105, 113, 88, 98,
	107, 101, 90, 104, 100, 109, 99, 112,
	91, 110, 103, 96, 106, 102, 85, 88,
	90, 109, 102, 98, 106, 92, 85, 88,
}}

type Permutation struct {
	Data []byte
}

func (p *Permutation) Inverse() *Permutation {
	// We allocate a byte buffer of 128 to avoid future allocations
	inv := &Permutation{Data: make([]byte, DefaultPermutationSize)}

	// We use an index counter of type byte since we will never jump over the 128 value mark
	for i := byte(0); i < DefaultPermutationSize; i++ {
		inv.Data[p.Data[i]-1] = i + 1
	}

	return inv
}

func (p *Permutation) Print() {
	for i := 0; i < DefaultPermutationSize; i++ {
		fmt.Printf("%d ", p.Data[i])
	}
	fmt.Println()
}
